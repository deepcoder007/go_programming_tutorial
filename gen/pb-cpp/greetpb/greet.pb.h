// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greetpb/greet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greetpb_2fgreet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greetpb_2fgreet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greetpb_2fgreet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greetpb_2fgreet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greetpb_2fgreet_2eproto;
namespace greet {
class GreetRequest;
struct GreetRequestDefaultTypeInternal;
extern GreetRequestDefaultTypeInternal _GreetRequest_default_instance_;
class GreetResponse;
struct GreetResponseDefaultTypeInternal;
extern GreetResponseDefaultTypeInternal _GreetResponse_default_instance_;
class Greeting;
struct GreetingDefaultTypeInternal;
extern GreetingDefaultTypeInternal _Greeting_default_instance_;
}  // namespace greet
PROTOBUF_NAMESPACE_OPEN
template<> ::greet::GreetRequest* Arena::CreateMaybeMessage<::greet::GreetRequest>(Arena*);
template<> ::greet::GreetResponse* Arena::CreateMaybeMessage<::greet::GreetResponse>(Arena*);
template<> ::greet::Greeting* Arena::CreateMaybeMessage<::greet::Greeting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greet {

// ===================================================================

class Greeting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greet.Greeting) */ {
 public:
  inline Greeting() : Greeting(nullptr) {}
  ~Greeting() override;
  explicit PROTOBUF_CONSTEXPR Greeting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Greeting(const Greeting& from);
  Greeting(Greeting&& from) noexcept
    : Greeting() {
    *this = ::std::move(from);
  }

  inline Greeting& operator=(const Greeting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Greeting& operator=(Greeting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Greeting& default_instance() {
    return *internal_default_instance();
  }
  static inline const Greeting* internal_default_instance() {
    return reinterpret_cast<const Greeting*>(
               &_Greeting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Greeting& a, Greeting& b) {
    a.Swap(&b);
  }
  inline void Swap(Greeting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Greeting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Greeting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Greeting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Greeting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Greeting& from) {
    Greeting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Greeting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greet.Greeting";
  }
  protected:
  explicit Greeting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
  };
  // string firstName = 1;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastName = 2;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_NODISCARD std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // @@protoc_insertion_point(class_scope:greet.Greeting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greetpb_2fgreet_2eproto;
};
// -------------------------------------------------------------------

class GreetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greet.GreetRequest) */ {
 public:
  inline GreetRequest() : GreetRequest(nullptr) {}
  ~GreetRequest() override;
  explicit PROTOBUF_CONSTEXPR GreetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GreetRequest(const GreetRequest& from);
  GreetRequest(GreetRequest&& from) noexcept
    : GreetRequest() {
    *this = ::std::move(from);
  }

  inline GreetRequest& operator=(const GreetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GreetRequest& operator=(GreetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GreetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GreetRequest* internal_default_instance() {
    return reinterpret_cast<const GreetRequest*>(
               &_GreetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GreetRequest& a, GreetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GreetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GreetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GreetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GreetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GreetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GreetRequest& from) {
    GreetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GreetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greet.GreetRequest";
  }
  protected:
  explicit GreetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGreetingFieldNumber = 1,
  };
  // .greet.Greeting greeting = 1;
  bool has_greeting() const;
  private:
  bool _internal_has_greeting() const;
  public:
  void clear_greeting();
  const ::greet::Greeting& greeting() const;
  PROTOBUF_NODISCARD ::greet::Greeting* release_greeting();
  ::greet::Greeting* mutable_greeting();
  void set_allocated_greeting(::greet::Greeting* greeting);
  private:
  const ::greet::Greeting& _internal_greeting() const;
  ::greet::Greeting* _internal_mutable_greeting();
  public:
  void unsafe_arena_set_allocated_greeting(
      ::greet::Greeting* greeting);
  ::greet::Greeting* unsafe_arena_release_greeting();

  // @@protoc_insertion_point(class_scope:greet.GreetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::greet::Greeting* greeting_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greetpb_2fgreet_2eproto;
};
// -------------------------------------------------------------------

class GreetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greet.GreetResponse) */ {
 public:
  inline GreetResponse() : GreetResponse(nullptr) {}
  ~GreetResponse() override;
  explicit PROTOBUF_CONSTEXPR GreetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GreetResponse(const GreetResponse& from);
  GreetResponse(GreetResponse&& from) noexcept
    : GreetResponse() {
    *this = ::std::move(from);
  }

  inline GreetResponse& operator=(const GreetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GreetResponse& operator=(GreetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GreetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GreetResponse* internal_default_instance() {
    return reinterpret_cast<const GreetResponse*>(
               &_GreetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GreetResponse& a, GreetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GreetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GreetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GreetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GreetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GreetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GreetResponse& from) {
    GreetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GreetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greet.GreetResponse";
  }
  protected:
  explicit GreetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:greet.GreetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greetpb_2fgreet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Greeting

// string firstName = 1;
inline void Greeting::clear_firstname() {
  _impl_.firstname_.ClearToEmpty();
}
inline const std::string& Greeting::firstname() const {
  // @@protoc_insertion_point(field_get:greet.Greeting.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Greeting::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greet.Greeting.firstName)
}
inline std::string* Greeting::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:greet.Greeting.firstName)
  return _s;
}
inline const std::string& Greeting::_internal_firstname() const {
  return _impl_.firstname_.Get();
}
inline void Greeting::_internal_set_firstname(const std::string& value) {
  
  _impl_.firstname_.Set(value, GetArenaForAllocation());
}
inline std::string* Greeting::_internal_mutable_firstname() {
  
  return _impl_.firstname_.Mutable(GetArenaForAllocation());
}
inline std::string* Greeting::release_firstname() {
  // @@protoc_insertion_point(field_release:greet.Greeting.firstName)
  return _impl_.firstname_.Release();
}
inline void Greeting::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  _impl_.firstname_.SetAllocated(firstname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstname_.IsDefault()) {
    _impl_.firstname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greet.Greeting.firstName)
}

// string lastName = 2;
inline void Greeting::clear_lastname() {
  _impl_.lastname_.ClearToEmpty();
}
inline const std::string& Greeting::lastname() const {
  // @@protoc_insertion_point(field_get:greet.Greeting.lastName)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Greeting::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lastname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greet.Greeting.lastName)
}
inline std::string* Greeting::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:greet.Greeting.lastName)
  return _s;
}
inline const std::string& Greeting::_internal_lastname() const {
  return _impl_.lastname_.Get();
}
inline void Greeting::_internal_set_lastname(const std::string& value) {
  
  _impl_.lastname_.Set(value, GetArenaForAllocation());
}
inline std::string* Greeting::_internal_mutable_lastname() {
  
  return _impl_.lastname_.Mutable(GetArenaForAllocation());
}
inline std::string* Greeting::release_lastname() {
  // @@protoc_insertion_point(field_release:greet.Greeting.lastName)
  return _impl_.lastname_.Release();
}
inline void Greeting::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  _impl_.lastname_.SetAllocated(lastname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastname_.IsDefault()) {
    _impl_.lastname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greet.Greeting.lastName)
}

// -------------------------------------------------------------------

// GreetRequest

// .greet.Greeting greeting = 1;
inline bool GreetRequest::_internal_has_greeting() const {
  return this != internal_default_instance() && _impl_.greeting_ != nullptr;
}
inline bool GreetRequest::has_greeting() const {
  return _internal_has_greeting();
}
inline void GreetRequest::clear_greeting() {
  if (GetArenaForAllocation() == nullptr && _impl_.greeting_ != nullptr) {
    delete _impl_.greeting_;
  }
  _impl_.greeting_ = nullptr;
}
inline const ::greet::Greeting& GreetRequest::_internal_greeting() const {
  const ::greet::Greeting* p = _impl_.greeting_;
  return p != nullptr ? *p : reinterpret_cast<const ::greet::Greeting&>(
      ::greet::_Greeting_default_instance_);
}
inline const ::greet::Greeting& GreetRequest::greeting() const {
  // @@protoc_insertion_point(field_get:greet.GreetRequest.greeting)
  return _internal_greeting();
}
inline void GreetRequest::unsafe_arena_set_allocated_greeting(
    ::greet::Greeting* greeting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.greeting_);
  }
  _impl_.greeting_ = greeting;
  if (greeting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:greet.GreetRequest.greeting)
}
inline ::greet::Greeting* GreetRequest::release_greeting() {
  
  ::greet::Greeting* temp = _impl_.greeting_;
  _impl_.greeting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::greet::Greeting* GreetRequest::unsafe_arena_release_greeting() {
  // @@protoc_insertion_point(field_release:greet.GreetRequest.greeting)
  
  ::greet::Greeting* temp = _impl_.greeting_;
  _impl_.greeting_ = nullptr;
  return temp;
}
inline ::greet::Greeting* GreetRequest::_internal_mutable_greeting() {
  
  if (_impl_.greeting_ == nullptr) {
    auto* p = CreateMaybeMessage<::greet::Greeting>(GetArenaForAllocation());
    _impl_.greeting_ = p;
  }
  return _impl_.greeting_;
}
inline ::greet::Greeting* GreetRequest::mutable_greeting() {
  ::greet::Greeting* _msg = _internal_mutable_greeting();
  // @@protoc_insertion_point(field_mutable:greet.GreetRequest.greeting)
  return _msg;
}
inline void GreetRequest::set_allocated_greeting(::greet::Greeting* greeting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.greeting_;
  }
  if (greeting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(greeting);
    if (message_arena != submessage_arena) {
      greeting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, greeting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.greeting_ = greeting;
  // @@protoc_insertion_point(field_set_allocated:greet.GreetRequest.greeting)
}

// -------------------------------------------------------------------

// GreetResponse

// string result = 1;
inline void GreetResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GreetResponse::result() const {
  // @@protoc_insertion_point(field_get:greet.GreetResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GreetResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greet.GreetResponse.result)
}
inline std::string* GreetResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:greet.GreetResponse.result)
  return _s;
}
inline const std::string& GreetResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GreetResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GreetResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GreetResponse::release_result() {
  // @@protoc_insertion_point(field_release:greet.GreetResponse.result)
  return _impl_.result_.Release();
}
inline void GreetResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greet.GreetResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace greet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greetpb_2fgreet_2eproto
